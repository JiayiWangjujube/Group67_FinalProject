/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package ui.Customer;

import Business.Enterprise.Enterprise;
import Business.Organization.Organization;
import Business.UserAccount.UserAccount;
import java.awt.CardLayout;
import java.util.ArrayList;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.table.DefaultTableModel;
import model.MasterOrderList;
import model.Order;
import model.OrderItem;
import model.Product;
import model.Supplier;
import model.SupplierDirectory;

/**
 *
 * @author yutingbai
 */
public class BuyProductJPanel extends javax.swing.JPanel {

    JPanel userProcessContainer;
    SupplierDirectory supplierDirectory;
    MasterOrderList masterOrderList;
    Order currentOrder;
    /**
     * Creates new form BuyProductJPanel
     */
    public BuyProductJPanel(JPanel userProcessContainer, Enterprise enterprise, UserAccount customer, Organization organization) {
        initComponents();
        this.userProcessContainer = userProcessContainer;
        this.supplierDirectory = supplierDirectory;
        this.masterOrderList = masterOrderList;
        this.currentOrder = new Order();
        
        
        //Supplier defaultSupplier = supplierDirectory.getSupplierlist().get(0);
        
        populateProductTable();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        tblProductCatalog = new javax.swing.JTable();
        spnQuantity = new javax.swing.JSpinner();
        lblQuantity = new javax.swing.JLabel();
        btnCheckOut = new javax.swing.JButton();
        btnBack = new javax.swing.JButton();

        tblProductCatalog.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        tblProductCatalog.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Product Name", "Product ID", "Price", "Availability"
            }
        ));
        jScrollPane1.setViewportView(tblProductCatalog);

        spnQuantity.setModel(new javax.swing.SpinnerNumberModel(0, 0, null, 1));

        lblQuantity.setText("Quantity:");

        btnCheckOut.setFont(new java.awt.Font("Lucida Grande", 1, 18)); // NOI18N
        btnCheckOut.setText("Check out");
        btnCheckOut.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCheckOutActionPerformed(evt);
            }
        });

        btnBack.setText(" Back");
        btnBack.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBackActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(46, 46, 46)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(layout.createSequentialGroup()
                            .addComponent(lblQuantity)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(spnQuantity, javax.swing.GroupLayout.PREFERRED_SIZE, 55, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 582, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(btnBack, javax.swing.GroupLayout.PREFERRED_SIZE, 110, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(btnCheckOut, javax.swing.GroupLayout.PREFERRED_SIZE, 163, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(67, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(40, 40, 40)
                .addComponent(btnBack)
                .addGap(68, 68, 68)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 122, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblQuantity)
                    .addComponent(spnQuantity, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(108, 108, 108)
                .addComponent(btnCheckOut)
                .addContainerGap(27, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void btnCheckOutActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCheckOutActionPerformed
        // TODO add your handling code here:
        
        // 获取表格模型
    DefaultTableModel model = (DefaultTableModel) tblProductCatalog.getModel();
    boolean isPurchaseSuccessful = false; 
    double totalAmount = 0.0; // 记录总金额

    // 获取用户输入的购买数量
    int quant;
    try {
        quant = (Integer) spnQuantity.getValue(); // 获取用户选择的数量
    } catch (Exception e) {
        JOptionPane.showMessageDialog(this, "Please enter a valid quantity.", "Invalid Input", JOptionPane.WARNING_MESSAGE);
        return;
    }

    // 验证数量是否有效
    if (quant <= 0) {
        JOptionPane.showMessageDialog(this, "Please enter a quantity greater than 0.", "Invalid Quantity", JOptionPane.WARNING_MESSAGE);
        return;
    }

    // 获取用户在表格中选中的行
    int selectedRowIndex = tblProductCatalog.getSelectedRow();
    if (selectedRowIndex < 0) {
        JOptionPane.showMessageDialog(this, "Please select a product from the table.", "No Selection", JOptionPane.WARNING_MESSAGE);
        return;
    }

    // 获取选中的商品信息
    String productName = model.getValueAt(selectedRowIndex, 0).toString();
    int availability = Integer.parseInt(model.getValueAt(selectedRowIndex, 3).toString()); // 当前库存数量
    double price = Double.parseDouble(model.getValueAt(selectedRowIndex, 2).toString());  // 商品价格

    // 检查库存是否足够
    if (quant > availability) {
        JOptionPane.showMessageDialog(this, "Not enough stock for " + productName + ". Available: " + availability, "Stock Warning", JOptionPane.WARNING_MESSAGE);
        return;
    }

    // 计算总价并更新库存
    totalAmount = price * quant;
    int updatedAvailability = availability - quant;
    model.setValueAt(updatedAvailability, selectedRowIndex, 3); // 更新库存

    isPurchaseSuccessful = true;

    // 显示成功信息
    if (isPurchaseSuccessful) {
        JOptionPane.showMessageDialog(this, "Purchase successful! \nProduct: " + productName +
                "\nQuantity: " + quant +
                "\nTotal Amount: $" + totalAmount, "Success", JOptionPane.INFORMATION_MESSAGE);

        // 重置数量选择器
        spnQuantity.setValue(0);
    }
    }//GEN-LAST:event_btnCheckOutActionPerformed

    private void btnBackActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBackActionPerformed

        userProcessContainer.remove(this);
        CardLayout layout = (CardLayout) userProcessContainer.getLayout();
        layout.previous(userProcessContainer);
    }//GEN-LAST:event_btnBackActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnBack;
    private javax.swing.JButton btnCheckOut;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel lblQuantity;
    private javax.swing.JSpinner spnQuantity;
    private javax.swing.JTable tblProductCatalog;
    // End of variables declaration//GEN-END:variables

private void populateProductTable() {
    // 获取表格的模型
    DefaultTableModel model = (DefaultTableModel) tblProductCatalog.getModel();
    model.setRowCount(0);

    // 在方法内部直接初始化产品数据
    Product product1 = new Product("Popcorn", 1, 8, 100);
    Product product2 = new Product("Coke", 2, 5, 500);
    //Product product3 = new Product("Tablet", 3, 500.0, 30);

    // 创建一个列表来存储这些产品
    ArrayList<Product> productList = new ArrayList<>();
    productList.add(product1);
    productList.add(product2);
    //productList.add(product3);

    // 将数据添加到表格中
    for (Product p : productList) {
        Object[] row = new Object[4];
        row[0] = p.getProdName();
        row[1] = p.getModelNumber();
        row[2] = p.getPrice();
        row[3] = p.getAvail();
        model.addRow(row);
    }
}


}
