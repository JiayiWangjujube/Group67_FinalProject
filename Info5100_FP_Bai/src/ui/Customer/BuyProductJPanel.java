/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package ui.Customer;

import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.table.DefaultTableModel;
import model.MasterOrderList;
import model.Order;
import model.OrderItem;
import model.Product;
import model.Supplier;
import model.SupplierDirectory;

/**
 *
 * @author yutingbai
 */
public class BuyProductJPanel extends javax.swing.JPanel {

    JPanel userProcessContainer;
    SupplierDirectory supplierDirectory;
    MasterOrderList masterOrderList;
    Order currentOrder;
    /**
     * Creates new form BuyProductJPanel
     */
    public BuyProductJPanel(JPanel userProcessContainer, SupplierDirectory supplierDirectory, MasterOrderList masterOrderList) {
        initComponents();
        this.userProcessContainer = userProcessContainer;
        this.supplierDirectory = supplierDirectory;
        this.masterOrderList = masterOrderList;
        this.currentOrder = new Order();
        
        
        Supplier defaultSupplier = supplierDirectory.getSupplierlist().get(0);
        
        populateProductTable();
        populateCartTable();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        tblProductCatalog = new javax.swing.JTable();
        spnQuantity = new javax.swing.JSpinner();
        lblQuantity = new javax.swing.JLabel();
        btnAddToCart = new javax.swing.JButton();
        lblItemsInCart = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        tblCart = new javax.swing.JTable();
        txtNewQuantity = new javax.swing.JTextField();
        btnModifyQuantity = new javax.swing.JButton();
        btnRemoveOrderItem = new javax.swing.JButton();
        btnCheckOut = new javax.swing.JButton();

        tblProductCatalog.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        tblProductCatalog.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Product Name", "Product ID", "Price", "Availability"
            }
        ));
        jScrollPane1.setViewportView(tblProductCatalog);

        spnQuantity.setModel(new javax.swing.SpinnerNumberModel(0, 0, null, 1));

        lblQuantity.setText("Quantity:");

        btnAddToCart.setText("Add to Cart");
        btnAddToCart.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAddToCartActionPerformed(evt);
            }
        });

        lblItemsInCart.setText("Items in cart:");

        tblCart.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Item Name", "Price", "Quantity", "Total Amount"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane2.setViewportView(tblCart);

        btnModifyQuantity.setText("Modify Quantity");
        btnModifyQuantity.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnModifyQuantityActionPerformed(evt);
            }
        });

        btnRemoveOrderItem.setText("Remove");
        btnRemoveOrderItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRemoveOrderItemActionPerformed(evt);
            }
        });

        btnCheckOut.setFont(new java.awt.Font("Lucida Grande", 1, 18)); // NOI18N
        btnCheckOut.setText("Check out");
        btnCheckOut.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCheckOutActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(46, 46, 46)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addComponent(jScrollPane2)
                        .addComponent(lblItemsInCart)
                        .addGroup(layout.createSequentialGroup()
                            .addComponent(lblQuantity)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(spnQuantity, javax.swing.GroupLayout.PREFERRED_SIZE, 55, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGap(18, 18, 18)
                            .addComponent(btnAddToCart, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 582, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(btnModifyQuantity)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(txtNewQuantity, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(377, 377, 377))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(btnRemoveOrderItem)
                        .addGap(341, 341, 341)
                        .addComponent(btnCheckOut, javax.swing.GroupLayout.PREFERRED_SIZE, 163, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(67, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(14, 14, 14)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 122, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblQuantity)
                    .addComponent(spnQuantity, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnAddToCart))
                .addGap(18, 18, 18)
                .addComponent(lblItemsInCart)
                .addGap(27, 27, 27)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 110, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnModifyQuantity)
                    .addComponent(txtNewQuantity, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnRemoveOrderItem)
                    .addComponent(btnCheckOut))
                .addContainerGap(27, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void btnAddToCartActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAddToCartActionPerformed
        // TODO add your handling code here:

        int selectedRowIndex = tblProductCatalog.getSelectedRow();
        if (selectedRowIndex < 0) {
            JOptionPane.showMessageDialog(this, "Please select the product first.", "Info", JOptionPane.WARNING_MESSAGE);
            return;
        }
        
        Product product = (Product) tblProductCatalog.getValueAt(selectedRowIndex, 0);
        int quant = 0;
        
        try  {
            
            quant = (Integer) spnQuantity.getValue();
            
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "Please check the quantity fields.", "Info", JOptionPane.WARNING_MESSAGE);
            return;
        }
        
        double originalPrice = product.getPrice();
        OrderItem item = currentOrder.findProduct(product);
        
        if (item == null) {
        // 新增订单项
        if (product.getAvail() >= quant) {
            currentOrder.addNewOrderItem(product, originalPrice, quant); // 这里去掉了 salesPrice 参数
            product.setAvail(product.getAvail() - quant);
        } else {
            JOptionPane.showMessageDialog(this, "Insufficient product availability.", "Info", JOptionPane.WARNING_MESSAGE);
            return;
        }
    } else {
        // 修改已有订单项数量
        int oldQuant = item.getQuantity();
        if (item.getProduct().getAvail() + oldQuant < quant) {
            JOptionPane.showMessageDialog(this, "Insufficient product availability.", "Info", JOptionPane.WARNING_MESSAGE);
            return;
        }

        item.getProduct().setAvail(item.getProduct().getAvail() + oldQuant - quant);
        item.setQuantity(quant);
    }
        
        populateProductTable();
        populateCartTable();
    }//GEN-LAST:event_btnAddToCartActionPerformed

    private void btnModifyQuantityActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnModifyQuantityActionPerformed
        // TODO add your handling code here:
        int selectedRowIndex = tblCart.getSelectedRow();
        if (selectedRowIndex < 0) {
            JOptionPane.showMessageDialog(this, "Please select the order item first.", "Info", JOptionPane.WARNING_MESSAGE);
            return;
        }
        
        OrderItem item = (OrderItem) tblCart.getValueAt(selectedRowIndex, 0);
        int quant = 0;
        
        try  {
            
            quant = Integer.parseInt(txtNewQuantity.getText());
            
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "Please check the modified quantity fields.", "Info", JOptionPane.WARNING_MESSAGE);
            return;
        }
        
        int oldQuant = item.getQuantity();
            if (item.getProduct().getAvail() + oldQuant < quant) {
                JOptionPane.showMessageDialog(this, "Please check product availability.", "Info", JOptionPane.WARNING_MESSAGE);
                return;    
            }
            
        item.getProduct().setAvail(item.getProduct().getAvail() + oldQuant - quant);
        item.setQuantity(quant);
            
        populateProductTable();
        populateCartTable();
    }//GEN-LAST:event_btnModifyQuantityActionPerformed

    private void btnRemoveOrderItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRemoveOrderItemActionPerformed
        int selectedRowIndex = tblCart.getSelectedRow();
        if (selectedRowIndex < 0) {
            JOptionPane.showMessageDialog(this, "Please select the order item first.", "Info", JOptionPane.WARNING_MESSAGE);
            return;
        }
        
        OrderItem item = (OrderItem) tblCart.getValueAt(selectedRowIndex, 0);
        int quant = 0;
        
        item.getProduct().setAvail(item.getProduct().getAvail() + item.getQuantity());
        currentOrder.deleteItem(item);
        
        populateProductTable();
        populateCartTable();
    }//GEN-LAST:event_btnRemoveOrderItemActionPerformed

    private void btnCheckOutActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCheckOutActionPerformed
        // TODO add your handling code here:
        masterOrderList.addNewOrder(currentOrder);
        currentOrder = new Order();
        
        populateProductTable();
        populateCartTable();
        
        txtNewQuantity.setText("");
        spnQuantity.setValue(0);
        
        JOptionPane.showMessageDialog(this, "Thank you for your purchase. Looking forward to see you again!", "Info", JOptionPane.INFORMATION_MESSAGE);
    }//GEN-LAST:event_btnCheckOutActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAddToCart;
    private javax.swing.JButton btnCheckOut;
    private javax.swing.JButton btnModifyQuantity;
    private javax.swing.JButton btnRemoveOrderItem;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JLabel lblItemsInCart;
    private javax.swing.JLabel lblQuantity;
    private javax.swing.JSpinner spnQuantity;
    private javax.swing.JTable tblCart;
    private javax.swing.JTable tblProductCatalog;
    private javax.swing.JTextField txtNewQuantity;
    // End of variables declaration//GEN-END:variables

private void populateProductTable() {
        
        Supplier defaultSupplier = supplierDirectory.getSupplierlist().get(0);
        
        if (defaultSupplier == null) {
            return;
        }
        
        DefaultTableModel model = (DefaultTableModel) tblProductCatalog.getModel();
        model.setRowCount(0);

        for (Product p : defaultSupplier.getProductCatalog().getProductcatalog()) {
            Object row[] = new Object[4];
            row[0] = p;
            row[1] = p.getModelNumber();
            row[2] = p.getPrice();
            row[3] = p.getAvail();
            model.addRow(row);
        }
    }

private void populateCartTable() {
        
        DefaultTableModel model = (DefaultTableModel) tblCart.getModel();
        model.setRowCount(0);

        for (OrderItem oi : currentOrder.getOrderItemList()) {
            Object row[] = new Object[4];
            row[0] = oi;
            row[1] = oi.getSalesPrice();
            row[2] = oi.getQuantity();
            row[3] = oi.getQuantity() * oi.getSalesPrice();
            model.addRow(row);
        }
    }

private void populateProductTable(String keyword) {
        
        DefaultTableModel model = (DefaultTableModel) tblProductCatalog.getModel();
        model.setRowCount(0);

        for (Supplier s : supplierDirectory.getSupplierlist()) {
        
            for (Product p : s.getProductCatalog().getProductcatalog()) {
                if (p.getProdName().equalsIgnoreCase(keyword)) {
                    
                    Object row[] = new Object[4];
                    row[0] = p;
                    row[1] = p.getModelNumber();
                    row[2] = p.getPrice();
                    row[3] = p.getAvail();
                    model.addRow(row);
                }
            }
        }
    }

}
