/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package ui.Venue;

import Business.Enterprise.Enterprise;
import Business.Organization.ConcertPlanningOrganization;
import Business.Organization.Organization;
import Business.UserAccount.UserAccount;
import Business.WorkQueue.VenueWorkRequest;
import Business.WorkQueue.WorkRequest;
import Model.Event;
import java.awt.CardLayout;
import java.util.ArrayList;
import java.util.List;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.table.DefaultTableModel;
import ui.Security.AssignSecurityJPanel;
import static ui.Organizer.EventManagementJPanel.eventList;
/**
 *
 * @author zhangdi
 */
public class VenueManagementJPanel extends javax.swing.JPanel {
    private JPanel userProcessContainer;
    private Enterprise enterprise;
    private UserAccount userAccount;
    private Organization organization;
    public static List<Object[]> workRequestQueue = new ArrayList<>();

    /**
     * Creates new form VenueManagementJPanel
     */
    public VenueManagementJPanel(JPanel userProcessContainer, UserAccount account, Organization organization, Enterprise enterprise) {
        initComponents();
        this.userProcessContainer = userProcessContainer;
        this.userAccount = account;
        this.enterprise = enterprise;
        this.organization=organization;

        populateTable();
    }
    
    public static void addWorkRequest(Object[] workRequest) {
        workRequestQueue.add(workRequest);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        btnBack = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        WorkRequestJTable = new javax.swing.JTable();
        btnViewDetails = new javax.swing.JButton();
        btnManageVeunes = new javax.swing.JButton();
        btnAssign = new javax.swing.JButton();
        btnProcessRequest = new javax.swing.JButton();

        jLabel1.setFont(new java.awt.Font("Microsoft YaHei UI", 0, 18)); // NOI18N
        jLabel1.setText("Venue Management");

        btnBack.setText("<<Back");
        btnBack.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBackActionPerformed(evt);
            }
        });

        WorkRequestJTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null}
            },
            new String [] {
                "Event Name", "Date", "Venue", "Status", "Organizer", "Assign To"
            }
        ));
        jScrollPane1.setViewportView(WorkRequestJTable);

        btnViewDetails.setText("View Details");

        btnManageVeunes.setText("Manage Venues");

        btnAssign.setText("Assign To Me");
        btnAssign.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAssignActionPerformed(evt);
            }
        });

        btnProcessRequest.setText("Process Requests");
        btnProcessRequest.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnProcessRequestActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(60, 60, 60)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(btnBack)
                        .addGap(132, 132, 132)
                        .addComponent(jLabel1))
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                        .addGroup(layout.createSequentialGroup()
                            .addComponent(btnViewDetails)
                            .addGap(38, 38, 38)
                            .addComponent(btnAssign)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(btnProcessRequest)
                            .addGap(54, 54, 54)
                            .addComponent(btnManageVeunes))
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 593, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(54, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(45, 45, 45)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnBack)
                    .addComponent(jLabel1))
                .addGap(44, 44, 44)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 238, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(26, 26, 26)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnViewDetails)
                    .addComponent(btnAssign)
                    .addComponent(btnProcessRequest)
                    .addComponent(btnManageVeunes))
                .addContainerGap(98, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void btnBackActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBackActionPerformed
        // TODO add your handling code here:
        userProcessContainer.remove(this);
        CardLayout layout = (CardLayout) userProcessContainer.getLayout();
        layout.previous(userProcessContainer);
    }//GEN-LAST:event_btnBackActionPerformed

    private void btnAssignActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAssignActionPerformed
        // TODO add your handling code here:
         int selectedRow = WorkRequestJTable.getSelectedRow();
        
        if (selectedRow < 0){
            return;
        }
        WorkRequest request = (WorkRequest)WorkRequestJTable.getValueAt(selectedRow, 0);
        
         if (request.getStatus().equals("Pending")) {
            request.setReceiver(userAccount);
            request.setStatus("Assigned");
            JOptionPane.showMessageDialog(this, "Request successfully assigned to you.", "Success", JOptionPane.INFORMATION_MESSAGE);
        } else {
            JOptionPane.showMessageDialog(this, "Request is already assigned or processed.", "Warning", JOptionPane.WARNING_MESSAGE);
        }
      
        populateTable();
    }//GEN-LAST:event_btnAssignActionPerformed

    private void btnProcessRequestActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnProcessRequestActionPerformed
        // TODO add your handling code here:
        
            int selectedRow = WorkRequestJTable.getSelectedRow();
        
        if (selectedRow < 0){
            return;
        }
        
        VenueWorkRequest request = (VenueWorkRequest)WorkRequestJTable.getValueAt(selectedRow, 0);
        request.setStatus("Processing");
        ProcessRequestJPanel processWorkRequestJPanel = new ProcessRequestJPanel(userProcessContainer, request);
        userProcessContainer.add("ProcessRequestJPanel", processWorkRequestJPanel);
        CardLayout layout = (CardLayout) userProcessContainer.getLayout();
        layout.next(userProcessContainer);
    }//GEN-LAST:event_btnProcessRequestActionPerformed
    private void populateTable() {
        DefaultTableModel model = (DefaultTableModel) WorkRequestJTable.getModel();
        model.setRowCount(0); 

      if (organization instanceof ConcertPlanningOrganization concertPlanningOrg) {
        List<VenueWorkRequest> requestList = concertPlanningOrg.getWorkQueue().getVenueWorkRequestList();

        for (VenueWorkRequest request : requestList) {

//            if (!"Pending".equals(request.getStatus())) {
//                continue; 
//            }

            // 构建表格行数据，只包含需要的字段
            Object[] row = new Object[5]; // 表格有 5 列
            row[0] = request.getEventName();   // 事件名称
            row[1] = request.getEventDate();   // 日期
            row[2] = request.getVenue();       // 场地
            row[3] = request.getStatus();      // 状态
            row[4] = request.getSender() == null ? "Unknown" : request.getSender().getUsername(); // 组织者用户名

 
            model.addRow(row);
        }
    } else {
        System.out.println("Error: Invalid organization type.");
    }
    }
    private void sendWorkRequest(int selectedRow) {
        // 获取选中的事件
        Event selectedEvent = eventList.get(selectedRow);
        if (selectedEvent == null) {
            JOptionPane.showMessageDialog(this, "Error: Unable to retrieve event details.", "Error", JOptionPane.ERROR_MESSAGE);
            return;
        }

        // 构建 WorkRequest 信息
        Object[] workRequest = new Object[6];
        workRequest[0] = selectedEvent.getEventName(); // Performance Name
        workRequest[1] = selectedEvent.getEventDate();
        workRequest[2] = selectedEvent.getVenue();
        workRequest[3] = userAccount.getUsername();   // Sender
        workRequest[4] = "Pending";               
        workRequest[5] = "Unassigned";                  // Status

        // 调用目标面板的方法，将 WorkRequest 发送到对方的队列
       AssignSecurityJPanel.addWorkRequest(workRequest); // 假设 Security 面板会处理请求
       JOptionPane.showMessageDialog(this, "Request sent and marked as Unassigned.", "Success", JOptionPane.INFORMATION_MESSAGE);
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTable WorkRequestJTable;
    private javax.swing.JButton btnAssign;
    private javax.swing.JButton btnBack;
    private javax.swing.JButton btnManageVeunes;
    private javax.swing.JButton btnProcessRequest;
    private javax.swing.JButton btnViewDetails;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPane1;
    // End of variables declaration//GEN-END:variables
}
